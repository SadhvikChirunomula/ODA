# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MatchInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: int=None, match_id: int=None, match_score: float=None):  # noqa: E501
        """MatchInput - a model defined in Swagger

        :param user_id: The user_id of this MatchInput.  # noqa: E501
        :type user_id: int
        :param match_id: The match_id of this MatchInput.  # noqa: E501
        :type match_id: int
        :param match_score: The match_score of this MatchInput.  # noqa: E501
        :type match_score: float
        """
        self.swagger_types = {
            'user_id': int,
            'match_id': int,
            'match_score': float
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'match_id': 'match_id',
            'match_score': 'match_score'
        }
        self._user_id = user_id
        self._match_id = match_id
        self._match_score = match_score

    @classmethod
    def from_dict(cls, dikt) -> 'MatchInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MatchInput of this MatchInput.  # noqa: E501
        :rtype: MatchInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> int:
        """Gets the user_id of this MatchInput.


        :return: The user_id of this MatchInput.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this MatchInput.


        :param user_id: The user_id of this MatchInput.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def match_id(self) -> int:
        """Gets the match_id of this MatchInput.


        :return: The match_id of this MatchInput.
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id: int):
        """Sets the match_id of this MatchInput.


        :param match_id: The match_id of this MatchInput.
        :type match_id: int
        """
        if match_id is None:
            raise ValueError("Invalid value for `match_id`, must not be `None`")  # noqa: E501

        self._match_id = match_id

    @property
    def match_score(self) -> float:
        """Gets the match_score of this MatchInput.


        :return: The match_score of this MatchInput.
        :rtype: float
        """
        return self._match_score

    @match_score.setter
    def match_score(self, match_score: float):
        """Sets the match_score of this MatchInput.


        :param match_score: The match_score of this MatchInput.
        :type match_score: float
        """
        if match_score is None:
            raise ValueError("Invalid value for `match_score`, must not be `None`")  # noqa: E501

        self._match_score = match_score
