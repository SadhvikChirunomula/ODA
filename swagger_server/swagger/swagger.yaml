openapi: 3.0.0
info:
  title: Dating App API
  description: API for a dating app
  version: "1.0"
servers:
- url: http://localhost:5000/
  description: Local development server
paths:
  /users:
    get:
      summary: List all users
      description: Retrieve a list of all users in the database.
      operationId: users_get
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
      x-openapi-router-controller: swagger_server.controllers.default_controller
    post:
      summary: Create a new user
      description: Create a new user with the given user data.
      operationId: users_post
      requestBody:
        description: User data to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
        required: true
      responses:
        "201":
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid input
        "409":
          description: User already exists
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /users/{user_id}:
    get:
      summary: Retrieve a user by ID
      description: Retrieve a user with the given user ID.
      operationId: users_user_id_get
      parameters:
      - name: user_id
        in: path
        description: ID of user to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Retrieved user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    put:
      summary: Update a user
      description: Update a user with the given user ID and data.
      operationId: users_user_id_put
      parameters:
      - name: user_id
        in: path
        description: ID of user to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: User data to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
        required: true
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid input
        "404":
          description: User not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /users/{user_id}/matches:
    get:
      summary: Retrieve a user's matches
      description: Retrieve a list of all matches for the user with the given user
        ID.
      operationId: users_user_id_matches_get
      parameters:
      - name: user_id
        in: path
        description: ID of user to retrieve matches for
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List of matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
                x-content-type: application/json
        "404":
          description: User not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    post:
      summary: Create a new match
      description: Create a new match between two users.
      operationId: users_user_id_matches_post
      parameters:
      - name: user_id
        in: path
        description: ID of user creating the match
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Match data to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchInput'
        required: true
      responses:
        "201":
          description: Created match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        "400":
          description: Invalid input
        "404":
          description: User not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        password:
          type: string
        age:
          type: integer
          format: int32
        gender:
          type: string
          enum:
          - male
          - female
          - other
        bio:
          type: string
        location:
          $ref: '#/components/schemas/User_location'
      example:
        password: password
        gender: male
        name: name
        bio: bio
        location:
          latitude: 1.4658129
          longitude: 5.962134
        id: 0
        email: email
        age: 6
    UserInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        age:
          type: integer
          format: int32
        gender:
          type: string
          enum:
          - male
          - female
          - other
        bio:
          type: string
        location:
          $ref: '#/components/schemas/User_location'
    Match:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        match_id:
          type: integer
          format: int64
        match_score:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        user_id: 6
        match_id: 1
        created_at: 2000-01-23T04:56:07.000+00:00
        match_score: 5.962134
        id: 0
    MatchInput:
      required:
      - match_id
      - match_score
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        match_id:
          type: integer
          format: int64
        match_score:
          type: number
          format: float
    User_location:
      type: object
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
      example:
        latitude: 1.4658129
        longitude: 5.962134

